import subprocess
import typer
import requests
from pathlib import Path
import config  # Importer les variables depuis config.py

app = typer.Typer()

def run_command(command, log_file, error_log_file, debug=config.DEBUG_MODE):
    """Ex√©cute une commande shell et enregistre les logs."""
    print(f"üîß Ex√©cution de la commande: {command}")

    result = subprocess.run(
        command, shell=True, capture_output=True, text=True
    )

    with open(log_file, "w") as f_out, open(error_log_file, "w") as f_err:
        f_out.write(result.stdout or "")
        f_err.write(result.stderr or "")

    if result.returncode != 0:
        print(f"‚ùå Erreur lors de l'ex√©cution de: {command}")
        print(f"üìÑ Consulte les logs: {error_log_file}")
        raise RuntimeError(f"Commande √©chou√©e avec le code {result.returncode}")

    print(f"‚úÖ Commande r√©ussie: {command}")

@app.command()
def build():
    """Compile le projet avec Gradle."""
    logs_dir = Path("./logs")
    logs_dir.mkdir(parents=True, exist_ok=True)
    
    try:
        run_command(f"./gradlew build --info", logs_dir / "build_output.log", logs_dir / "build_errors.log")
    except RuntimeError:
        print("‚ùå √âchec de la compilation du projet.")
        return

    print("‚úÖ Compilation r√©ussie!")

@app.command()
def test():
    """Ex√©cute les tests unitaires avec Gradle."""
    logs_dir = Path("./logs")
    logs_dir.mkdir(parents=True, exist_ok=True)

    try:
        run_command(f"./gradlew test --info", logs_dir / "test_output.log", logs_dir / "test_errors.log")
    except RuntimeError:
        print("‚ùå √âchec des tests unitaires.")
        return

    print("‚úÖ Tests ex√©cut√©s avec succ√®s!")

@app.command()
def pack():
    """G√©n√®re le fichier .war de l'application."""
    logs_dir = Path("./logs")
    logs_dir.mkdir(parents=True, exist_ok=True)

    try:
        run_command(f"./gradlew war --info", logs_dir / "pack_output.log", logs_dir / "pack_errors.log")
    except RuntimeError:
        print("‚ùå √âchec de la g√©n√©ration du fichier .war.")
        return

    print("‚úÖ Fichier .war g√©n√©r√© avec succ√®s!")

@app.command()
def publish():
    """Publie le projet dans la GitLab Package Registry avec Gradle."""
    
    logs_dir = Path("./logs")
    logs_dir.mkdir(parents=True, exist_ok=True)

    print(f"üöÄ Publication du package dans la GitLab Package Registry (projet {config.PROJECT_ID})...")

    # Configuration du fichier gradle.properties pour l'authentification
    gradle_props_path = Path("gradle.properties")
    gradle_props_content = f"""
publishing {{
    repositories {{
        maven {{
            url = uri("https://gitlab.com/api/v4/projects/{config.PROJECT_ID}/packages/maven")
            credentials {{
                username = "{config.TOKEN_NAME}"
                password = "{config.TOKEN}"
            }}
        }}
    }}
}}
"""
    with gradle_props_path.open("w") as f:
        f.write(gradle_props_content)

    # üîß Ex√©cution de Gradle avec `run_command`
    try:
        run_command(f"./gradlew publish --info", logs_dir / "publish_output.log", logs_dir / "publish_errors.log")
    except RuntimeError:
        print("‚ùå √âchec de la publication du package.")
        return

    print("‚úÖ Publication r√©ussie dans la GitLab Package Registry!")

    # üîé V√©rification de la publication avec Deploy Token
    print("üîé V√©rification de la publication dans la GitLab Package Registry...")

    package_registry_url = f"https://gitlab.com/api/v4/projects/{config.PROJECT_ID}/packages"
    auth = (config.TOKEN_NAME, config.TOKEN)  # Utilisation du Deploy Token pour l'authentification

    response = requests.get(package_registry_url, auth=auth)

    if response.status_code == 200 and response.json():
        print(f"üì¶ Package(s) publi√©(s) avec succ√®s :")
        for package in response.json():
            print(f"- {package.get('name', 'Inconnu')} (version {package.get('version', 'N/A')})")
    else:
        print("‚ùå Erreur : Impossible de v√©rifier la publication du package !")
        print(f"Code HTTP: {response.status_code}")
        print(f"R√©ponse: {response.text}")

# üî• Ex√©cuter l'application Typer
if __name__ == "__main__":
    app()
